name: Build ESP32-C3 MicroPython with ST7789.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-esp32-c3:
    runs-on: ubuntu-latest
    env:
      IDF_CCACHE_ENABLE: 1
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
      
      - name: Clone MicroPython
        run: |
          git clone --depth 1 https://github.com/micropython/micropython.git
       
      - id: idf_ver
        name: Read ESP-IDF and Python version from tools/ci.sh
        run: |
          source micropython/tools/ci.sh
          echo "IDF_VER=${IDF_VER}" | tee -a "$GITHUB_OUTPUT"
          echo "PYTHON_VER=${PYTHON_VER}" | tee -a "$GITHUB_OUTPUT"
      
      - name: Setup Python from ci.sh
        uses: actions/setup-python@v5.6.0
        with:
          python-version: ${{ steps.idf_ver.outputs.PYTHON_VER }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git coreutils wget make cmake ninja-build ccache gcc g++ python3-pip python3-setuptools python3-venv
          pip3 install --upgrade pip
          pip3 install pyelftools ar
      
      - name: Cache ESP-IDF and environment
        id: cache-esp
        uses: actions/cache@v4.2.3
        with:
          path: |
            esp-idf
            ~/.espressif
          key: esp-full-${{ runner.os }}-${{ steps.idf_ver.outputs.IDF_VER }}-${{ hashFiles('micropython/tools/ci.sh') }}
          restore-keys: |
            esp-full-${{ runner.os }}-${{ steps.idf_ver.outputs.IDF_VER }}-
      
      - name: Setup ESP-IDF
        run: |
          if [ ! -d "esp-idf" ]; then
            git clone --depth 1 --branch ${{ steps.idf_ver.outputs.IDF_VER }} https://github.com/espressif/esp-idf.git
            git -C esp-idf submodule update --init --recursive --depth=1
          fi
          
          if [ ! -d "$HOME/.espressif/python_env" ]; then
            echo "Instalando entorno virtual de ESP-IDF..."
            ./esp-idf/install.sh
          fi
     
      - name: Set up environment
        run: |
          source esp-idf/export.sh
          echo "IDF_PATH=$GITHUB_WORKSPACE/esp-idf" >> $GITHUB_ENV
          idf.py --version

      - name: Add ST7789 library from russhughes
        run: |
          git clone --depth 1 https://github.com/russhughes/st7789_mpy.git
          mkdir -p micropython/drivers/st7789
          cp st7789_mpy/st7789/st7789.c micropython/drivers/st7789/
          cp st7789_mpy/st7789/st7789.h micropython/drivers/st7789/
          cp st7789_mpy/st7789/mpfile.c micropython/drivers/st7789/
          cp st7789_mpy/st7789/mpfile.h micropython/drivers/st7789/
          
          # Agregar el driver al Makefile
          echo "DRIVERS_EXTRA = drivers/st7789" >> micropython/ports/esp32/mpconfigport.mk
          
          # Configurar opciones necesarias
          echo "CFLAGS_EXTRA += -DMODULE_ST7789_ENABLED=1" >> micropython/ports/esp32/mpconfigport.mk
          echo "CFLAGS_EXTRA += -DMICROPY_PY_FRAMEBUF=1" >> micropython/ports/esp32/mpconfigport.mk
          
      - name: Build mpy-cross and ESP32-C3 port
        run: |
          source esp-idf/export.sh
          cd ${{ github.workspace }}/micropython
          make -j$(nproc) -C mpy-cross
          make -j$(nproc) -C ports/esp32 submodules
          make -j$(nproc) -C ports/esp32 BOARD=ESP32_GENERIC_C3
          
      - name: Verify build artifacts
        run: |
          ls -lh micropython/ports/esp32/build-ESP32_GENERIC_C3/*.bin
          ls -lh micropython/ports/esp32/build-ESP32_GENERIC_C3/bootloader/*.bin
          ls -lh micropython/ports/esp32/build-ESP32_GENERIC_C3/partition_table/*.bin
          

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: esp32c3-firmware
          path: |
            micropython/ports/esp32/build-ESP32_GENERIC_C3/firmware.bin
            micropython/ports/esp32/build-ESP32_GENERIC_C3/bootloader/bootloader.bin
            micropython/ports/esp32/build-ESP32_GENERIC_C3/partition_table/partition-table.bin
            micropython/ports/esp32/build-ESP32_GENERIC_C3/micropython.bin
