name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
permissions:
  contents: write
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [RPI_PICO]
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libffi-dev git pkg-config libssl-dev python3 python3-pip python3-venv doxygen gcc-arm-none-eabi parallel libreadline-dev libsdl2-2.0-0 libsdl2-dev
      
      - name: Install pycparser
        run: pip install pycparser

      - name: Clonar lv_micropython (Fork de MicroPython con LVGL)
        run: |
          git clone --recurse-submodules https://github.com/lvgl/lv_micropython.git micropython
          cd micropython
          git submodule update --init --recursive user_modules/lv_binding_micropython
          echo "$GITHUB_WORKSPACE"
      
      - name: Build MicroPython para RP2040
        run: |
          cd micropython
          make -C mpy-cross
          cd ports/rp2
          make submodules
          make clean
          make USER_C_MODULES=$GITHUB_WORKSPACE/micropython/user_modules/lv_binding_micropython/bindings.cmake
      
      - name: Build MicroPython para Pico W
        run: |
          cd micropython
          make -C mpy-cross
          cd ports/rp2
          make BOARD=RPI_PICO submodules
          make BOARD=RPI_PICO clean
          make BOARD=RPI_PICO USER_C_MODULES=$GITHUB_WORKSPACE/micropython/user_modules/lv_binding_micropython/bindings.cmake
      - run: echo "üçè This job's status is ${{ job.status }}."

      - name: Clone Pico SDK
        run: |
          git clone https://github.com/raspberrypi/pico-sdk.git
          cd pico-sdk
          git submodule update --init lib/mbedtls
          cd ..

      - name: Clone and Build picotool
        run: |
          git clone https://github.com/raspberrypi/picotool.git
          cd picotool
          mkdir build
          cd build
          export PICO_SDK_PATH=${GITHUB_WORKSPACE}/pico-sdk
          cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/picotool/build ..
          make -j$(nproc)
          cd ../..
  
      - name: Convert .elf to .uf2
        run: |
          ${GITHUB_WORKSPACE}/picotool/build/picotool uf2 convert \
          ${GITHUB_WORKSPACE}/micropython/ports/rp2/build-${{ matrix.board }}/firmware.elf \
          ${GITHUB_WORKSPACE}/micropython/ports/rp2/build-${{ matrix.board }}/firmware.uf2
  
      - name: Get MicroPython Version from mpconfig.h
        run: |
          cd ${GITHUB_WORKSPACE}/micropython/
          MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
          MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
          MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
      
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
      
          echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
  
          
      - name: Generate Tag
        id: tag
        run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
  
      - name: GH Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "MicroPython with LVGL for RP2 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
          body: |
            Automated release for MicroPython.
            ## How to Flash the Firmware
            ### Windows, Linux:
            1. Download the .uf2 file from the release.
            2. Press and hold the BOOT button on the RP2040 and press RESET button or connect it to your computer via USB.
            3. Release the button. The RP2040  will appear as a removable drive.
            4. Drag and drop the .uf2 file onto the drive.
            5. The RP2040 will reboot and run MicroPython.
          draft: false
          prerelease: false
          files: ports/rp2/build-${{ matrix.board }}/firmware.uf2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
