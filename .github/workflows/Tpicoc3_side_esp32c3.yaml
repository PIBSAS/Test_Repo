name: TPicoC3 MicroPython for ESP32 C3 Side 

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 */14 * *'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clone this repo
      uses: actions/checkout@v4
      
    - name: Clone Micropython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - name: Install dependencies
      run: |
       sudo apt-get update
       sudo apt-get install -y build-essential git wget flex bison gperf pkg-config python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0

    - name: Clone ESP-IDF
      run: |
        mkdir -p esp
        cd esp
        git clone -b v5.4.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf/tools
        python3 idf_tools.py install cmake
        cd ..
        ./install.sh esp32c3
        cd

    - name: Compilar MicroPython
      run: |
        source esp/esp-idf/export.sh
        cd micropython/
        make -C mpy-cross
        export IDF_TARGET=esp32c3
        cd ports/esp32/
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_C3 \
               -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_C3" \
               -B build-ESP32_GENERIC_C3 build
 
    - name: Mover binarios MicroPython
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/micropython.bin ./artifacts/micropython.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/bootloader/bootloader.bin ./artifacts/bootloader.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/partition_table/partition-table.bin ./artifacts/partition-table.bin || true
    
    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
    
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: Verificar existencia de los tres binarios
      run: |
        if [ ! -f ./artifacts/micropython.bin ] || [ ! -f ./artifacts/bootloader.bin ] || [ ! -f ./artifacts/partition-table.bin ]; then
          echo "Falta uno o m√°s archivos binarios necesarios, cancelando release."
          exit 1
        fi
    
    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython for LilyGo TPico C3 Displayr release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          
          ## What we get here: 
          - MicroPython for TPico C3 ESP32 Side:
            - ```micropython.bin, bootloader.bin and partition-table.bin.```

          # Instructions
            You need to have some dependencies pre-instaled in your OS:
            - Python 3
            - Pip
            - Python VENV
          ## Windows:
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          or
          
          ````bash
          py -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put TPicoC3 in BOOTLOADER MODE(This is not really necesary):
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython .
          ````bash
          python -m esptool --chip esp32c3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 4MB --flash_freq 40m 0x1000 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
          
          ## Linux:
          
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          source esp-env/bin/activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put TPicoC3  in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython.
          ````bash
          python -m esptool --chip esp32c3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 4MB --flash_freq 40m 0x1000 bootloader/bootloader.bin 0x8000 partition_table/partition-table.bin 0x10000 micropython.bin
          ````
                    
          ### NOTE IN WINDOWS:
          - If you get a PowerShell Scripts Policy Execution Exception that don't let you activate the Virtual Environment:
          
           ````bash
          .\esp-env\Scripts\activate
          ````
          
          - Then open a Terminal like Administrator and type:
          
          ````bash
          Set-ExecutionPolicy Unrestricted
          ````
          - Close the Terminal now you can activate the Python Virtual Enmvironment
          
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
