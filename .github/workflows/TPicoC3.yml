name: T-PicoC3 Display MicroPython for ESP32 C3 side and MicroPython for RP2040 side + st7789 + TPicoESPC3 wifi module

permissions:
  contents: write

on:
  push:
    tags:
     - 'v*'
  schedule:
     - cron: '0 0 */14 * *'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clone Micropython
      run: git clone --recurse-submodules https://github.com/micropython/micropython.git

    - name: Clone st7789_mpy
      run: git clone https://github.com/russhughes/st7789_mpy.git

    - name: Clone TPicoESPC3
      run: git clone https://github.com/PIBSAS/TPicoESPC3.git

    - name: Copy tdt_config and some fonts like frozen modules
      run: |
       cp "$GITHUB_WORKSPACE/st7789_mpy/examples/configs/t-picoc3/tft_config.py" "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp "$GITHUB_WORKSPACE/st7789_mpy/examples/configs/tdisplay_rp2040/tft_buttons.py" "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/examples/chango/chango_16.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/examples/chango/chango_32.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/examples/chango/chango_64.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/astrol.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/gotheng.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/greekc.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/italict.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/lowmat.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/marker.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/music.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/vector/romancs.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/bitmap/vga1_8x8.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/bitmap/vga1_8x16.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/bitmap/vga1_16x16.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
       cp $GITHUB_WORKSPACE/st7789_mpy/fonts/bitmap/vga1_16x32.py "$GITHUB_WORKSPACE/micropython/ports/rp2/modules/"
             
    - name: Copy TPicoESPC3 like frozen module
      run: |
        cp $GITHUB_WORKSPACE/TPicoESPC3/TPicoESPC3.py $GITHUB_WORKSPACE/micropython/ports/rp2/modules/

    - name: Install dependencies
      run: |
       sudo apt-get update
       sudo apt-get install -y gcc-arm-none-eabi libssl-dev python3 python3-pip python3-venv build-essential libffi-dev git pkg-config wget flex bison gperf cmake ninja-build ccache dfu-util libusb-1.0-0

    - name: Clone ESP-IDF
      run: |
        mkdir -p esp
        cd esp
        git clone -b v5.4.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf/tools
        python3 idf_tools.py install cmake
        cd ..
        ./install.sh esp32
        cd
     
    - name: Build MicroPython for ESP32-C3
      run: |
        source esp/esp-idf/export.sh
        cd micropython
        make -C mpy-cross
        export IDF_TARGET=esp32
        cd ports/esp32
        idf.py -D MICROPY_BOARD=ESP32_GENERIC_C3 \
               -D MICROPY_BOARD_DIR="$GITHUB_WORKSPACE/micropython/ports/esp32/boards/ESP32_GENERIC_C3" \
               -D USER_C_MODULES="$GITHUB_WORKSPACE/st7789_mpy/st7789/micropython.cmake" \
               -B build-ESP32_GENERIC_C3 build
    
    #- name: List files after build
    #  run: ls -l $GITHUB_WORKSPACEmicropython/ports/esp32/build-ESP32_GENERIC_C3/
    
    - name: Build MicroPython for RP2040
      run: |
        cd micropython
        make -C mpy-cross
        cd ports/rp2
        make USER_C_MODULES=$GITHUB_WORKSPACE/st7789_mpy/st7789/micropython.cmake
        make submodules
        make

    - name: Move firmwares files to artifacts
      run: |
        mkdir -p ./artifacts
        cp micropython/ports/rp2/build-RPI_PICO/*.uf2 ./artifacts/T-PicoC3.uf2
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/micropython.bin ./artifacts/micropython.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/bootloader/bootloader.bin ./artifacts/bootloader.bin || true
        cp micropython/ports/esp32/build-ESP32_GENERIC_C3/partition_table/partition-table.bin ./artifacts/partition-table.bin || true
        
    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
        PRERELEASE=$(grep -oP '(?<=#define MICROPY_VERSION_PRERELEASE )[0-9]+' py/mpconfig.h)

        if [ "$PRERELEASE" -eq 1 ]; then
          MPY_VERSION="$MAJOR.$MINOR.$MICRO-preview"
        else
          MPY_VERSION="$MAJOR.$MINOR.$MICRO"
        fi

        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
        
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: Validar tama√±os de binarios por nombre
      run: |
        check_size() {
          FILE=$1
          MAX_BYTES=$2
          if [ -f "$FILE" ]; then
            SIZE=$(stat -c%s "$FILE")
            if [ "$SIZE" -gt "$MAX_BYTES" ]; then
              echo "::error::El archivo $FILE es demasiado grande ($(du -h "$FILE" | cut -f1))"
              exit 1
            else
              echo "$FILE ok ($(du -h "$FILE" | cut -f1))"
            fi
          else
            echo "::warning::El archivo $FILE no existe, se omite"
          fi
        }
    
        check_size ./artifacts/micropython.bin $((2 * 1024 * 1024))       # 2MB
        check_size ./artifacts/bootloader.bin $((128 * 1024))            # 128KB
        check_size ./artifacts/partition-table.bin $((16 * 1024))        # 16KB
        check_size ./artifacts/T-PicoC3.uf2 $((2 * 1024 * 1024))         # 2MB
        
    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "MicroPython + ST7789 Display Driver for LilyGo T-PicoC3 Display for both sides Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          
          ## What we get here: 
          - MicroPython for TPico C3 ESP32 Side:
            - ```micropython.bin, bootloader.bin and partition-table.bin.```

          # Instructions
            You need to have some dependencies pre-instaled in your OS:
            - Python 3
            - Pip
            - Python VENV
          ## Windows:
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          or
          
          ````bash
          py -m venv esp-env
          ````
          
          ````bash
          .\esp-env\Scripts\activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put TPicoC3 in BOOTLOADER MODE(This is not really necesary):
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython .
          ````bash
          python -m esptool --chip esp32c3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 4MB --flash_freq 40m 0x1000 bootloader.bin 0x8000 partition-table.bin 0x10000 micropython.bin
          ````
          
          ## Linux:
          
          ````bash
          python -m venv esp-env
          ````
          
          ````bash
          source esp-env/bin/activate
          ````
          
          ### Then install esptool:
          ````bash
          pip install esptool
          ````
          
          ### Put TPicoC3  in BOOTLOADER MODE:
          - With USB cable on USB COM Port, press BOOT button then RST button, release RST, then release BOOT button. Or unplug, press BOOT button meanwhile you plug in the usb cable to PC or SBC like a Raspberry Pi.
          
          ### Erase Flash:
          #### Step for MicroPython.
          ````bash
          python -m esptool --chip esp32c3 erase_flash
          ````
          ### Then Flash:
          - Put 3 binaries in the same folder you are executing the steps, example Downloads folder, you need to be in that folder where are the binaries.
          ````bash
          python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_size 4MB --flash_freq 40m 0x1000 bootloader/bootloader.bin 0x8000 partition_table/partition-table.bin 0x10000 micropython.bin
          ````
                    
          ### NOTE IN WINDOWS:
          - If you get a PowerShell Scripts Policy Execution Exception that don't let you activate the Virtual Environment:
          
           ````bash
          .\esp-env\Scripts\activate
          ````
          
          - Then open a Terminal like Administrator and type:
          
          ````bash
          Set-ExecutionPolicy Unrestricted
          ````
          - Close the Terminal now you can activate the Python Virtual Enmvironment
          
        draft: false
        prerelease: false
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
