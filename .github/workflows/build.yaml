name: rp2 port
permissions:
  contents: write
on:
  push:
    tags:
     - 'v*'
  schedule:
     #- cron: '0 0 * * 0'
  
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        board: [PICO]
    steps:
    - name: lv_micro
      run: git clone https://github.com/lvgl/lv_micropython.git
      
    - name: arm-none-eabi-gcc
      uses: carlosperate/arm-none-eabi-gcc-action@v1.9.1
    
    - name: Initialize lv_bindings submodule
      run: |
        cd lv_micropython
        git submodule update --init --recursive lib/lv_bindings
      
    - name: Initialize Micropython submodules
      run: |
        cd lv_micropython
        make -C ports/rp2 BOARD=${{ matrix.board }} USER_C_MODULES=../../lib/lv_bindings/bindings.cmake submodules
    
    - name: Build mpy-cross
      run: |
        cd lv_micropython
        make -j $(nproc) -C mpy-cross
    
    - name: Build ${{ matrix.board }}
      run: |
        cd lv_micropython
        make -j $(nproc) -C ports/rp2 BOARD=${{ matrix.board }} USER_C_MODULES=../../lib/lv_bindings/bindings.cmake

    - name: Clonar el SDK de Raspberry Pi Pico
      run: |
        git clone https://github.com/raspberrypi/pico-sdk.git
        cd pico-sdk
        git submodule update --init lib/mbedtls
        cd ..

    - name: Clonar picotool
      run: |
        git clone https://github.com/raspberrypi/picotool.git
        cd picotool
        mkdir build
        cd build
        export PICO_SDK_PATH=../../pico-sdk  # Aseg√∫rate de que esta ruta sea correcta
        cmake ..
        make
        cd ../..

    - name: Convertir .elf a .uf2
      run: |
        ./picotool/build/picotool uf2 convert ${GITHUB_WORKSPACE}/lv_micropython/ports/rp2/build-${{ matrix.board }}/firmware.elf ${GITHUB_WORKSPACE}/lv_micropython/ports/rp2/build-${{ matrix.board }}/firmware.uf2

    - name: Get MicroPython Version from mpconfig.h
      run: |
        cd lv_micropython/
        MAJOR=$(grep -oP '(?<=#define MICROPY_VERSION_MAJOR )[0-9]+' py/mpconfig.h)
        MINOR=$(grep -oP '(?<=#define MICROPY_VERSION_MINOR )[0-9]+' py/mpconfig.h)
        MICRO=$(grep -oP '(?<=#define MICROPY_VERSION_MICRO )[0-9]+' py/mpconfig.h)
    
        MPY_VERSION="$MAJOR.$MINOR.$MICRO"
    
        echo "MPY_VERSION=$MPY_VERSION" >> $GITHUB_ENV
        
    - name: Generate Tag
      id: tag
      run: echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

    - name: GH Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "LV_MicroPython RP2 Release version ${{ env.MPY_VERSION }} (Build ${{ env.TAG_NAME }})"
        body: |
          Automated release for MicroPython.
          ## How to Flash the Firmware
          ### Windows, Linux:
          1. Download the .uf2 file from the release.
          2. Press and hold the BOOT button on the RP2040 and press RESET button or connect it to your computer via USB.
          3. Release the button. The RP2040  will appear as a removable drive.
          4. Drag and drop the .uf2 file onto the drive.
          5. The RP2040 will reboot and run MicroPython.
        draft: false
        prerelease: false
        files: lv_micropython/ports/rp2/build-${{ matrix.board }}/firmware.uf2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
